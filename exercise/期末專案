//參考課堂範例維特比演算法的程式碼
function argmax(list) {
  let max = Number.NEGATIVE_INFINITY, index = null
  for (let k in list) {
    if (list[k] > max) { index=k; max=list[k] }
  }
  return {max, index}
}

module.exports = argmax

const P = {
  '學餐': 0.3,
  '早餐店': 0.7,
  '學餐=>學餐': 0.3,
  '學餐=>早餐店': 0.7,
  '早餐店=>學餐': 0.8,
  '早餐店=>早餐店': 0.2,
  '學餐=>晴': 0.2,
  '學餐=>雨': 0.7,
  '學餐=>陰': 0.1,
  '早餐店=>晴': 0.7,
  '早餐店=>雨': 0.2,
  '早餐店=>陰': 0.1,
}

function viterbi(obs, states, P) {
  console.log('觀察到的序列=', obs)
  const T = [{}] // Viterbi Table
  let path = {}  // path[state] = 從 0 到 t 到達 state 機率最大的 path
  for (let y of states) { // # Initialize base cases (t == 0)
    T[0][y] = P[y] * P[y+'=>'+obs[0]]
    path[y] = [y]
  }
  
  
  // console.log('T=%j path=%j', T, path)
  for (let t=1; t<obs.length; t++) { // # Run Viterbi for t > 0
    T[t] = {}
    let newpath = {}
    for (let y of states) {
      let {max:prob, index:si} = argmax(states.map((y0)=>T[t-1][y0] * P[y0+'=>'+y] * P[y+'=>'+obs[t]]))
      let state = states[si]
      T[t][y] = prob   // console.log('y=%s prob=%d state=%s', y, prob, state)
      newpath[y] = path[state].concat(y)
    }
    
    // console.log('t=%d T=%j', t, T)
    path = newpath
    console.log('t=%d path=%j', t, path)
  }
  let {max:prob, index:si} = argmax(states.map((y)=>T[obs.length - 1][y]))
  console.log('T=%j', T)
  return {prob, path:path[states[si]]}
}

let {prob, path} = viterbi('晴 晴 雨 陰 晴'.split(' '), ['學餐', '早餐店'], P)
console.log('prob=%d path=%j＝最可能的隱序列', prob, path)
